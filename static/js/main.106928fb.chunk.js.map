{"version":3,"sources":["serviceWorker.js","loader/index.js","useritem/index.js","userdetails/index.js","userlist/index.js","usercontainer/index.js","index.js"],"names":["Boolean","window","location","hostname","match","count","LoaderPercent","setInterval","id","src","UserItem","props","className","key","this","onClick","selectUser","user","editMode","editUserId","type","name","confirm","deleteUser","alt","updateUser","document","getElementById","value","editUser","React","Component","UserDetails","console","log","state","loading","content","querySelector","overlay","style","display","isShow","setState","class","selectedUser","selectedUserOrganization","closePopup","UserList","searchList","e","searchKey","target","toLowerCase","userList","filteredList","filter","item","includes","isFilter","userDetails","masterUserList","isData","displayDetails","filtered","bind","fetch","then","response","json","i","updatedUserList","ele","updatedVal","editedUserIndex","findIndex","find","classList","remove","add","setTimeout","personName","prompt","newId","length","method","body","JSON","stringify","headers","addedData","getUsers","userListToBeRendered","onChange","placeholder","map","index","addUser","UserContainer","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.106928fb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './index.css'\r\n\r\nlet count = 0;\r\nlet timerS ;\r\nfunction LoaderPercent() {\r\n    //document.getElementById(\"loader\").style.display = \"block\";\r\n    timerS = setInterval(function() {\r\n        if (count > 99) {\r\n            count = 0;\r\n        } \r\n        count ++;\r\n        //document.getElementById(\"countDisplay\").innerHTML = count + \"%\";\r\n    }, 200)\r\n\r\n    return (\r\n        <div id=\"countDisplay\">\r\n            <img src=\"./ContactList/loader.gif\" id=\"loader\"></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction stopLoading() {\r\n    document.getElementById(\"loader\").style.display = \"none\";\r\n    count = 0;\r\n    document.getElementById(\"countDisplay\").innerHTML = \"Load here\";\r\n    clearInterval(timerS);\r\n}\r\n\r\nexport default LoaderPercent","import React from 'react';\r\nimport './index.css'\r\n\r\nclass UserItem extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n // flex-col flex-wrap justify-evenly\r\n // flex mb-4 flex-wrap divide-x divide-indigo-500 divide-y divide-indigo-500\r\n    render() {\r\n        return (\r\n            <div className=\"user-item\">\r\n                <tr className=\"user-item-row\" \r\n                key={this.props.id} id={this.props.id}> \r\n                    <td className=\"serialNumber\">{this.props.id}</td>\r\n                    <td className=\"name\" \r\n                    onClick={() => {this.props.selectUser(this.props.user[\"Display Name\"],this.props.id) } }>\r\n                        {(this.props.editMode && (this.props.editUserId === this.props.id)) ?\r\n                        <input type=\"text\" id=\"fname\" name=\"fname\"></input> : this.props.user[\"Display Name\"]} \r\n                    </td>\r\n                    <td className=\"delete\"> \r\n                        <img src=\"./ContactList/delete.png\" className=\"btn-del\"\r\n                        onClick={() => { if (window.confirm('Are you sure to delete this user?')) \r\n                        this.props.deleteUser(this.props.user[\"Display Name\"],this.props.id) } } alt='delete'>\r\n                        </img>\r\n                    </td>\r\n                    <td className=\"edit\"> \r\n                        {(this.props.editMode && (this.props.editUserId === this.props.id)) ?\r\n                        <img src=\"https://cdn4.iconfinder.com/data/icons/defaulticon/icons/png/256x256/check.png\" \r\n                        className=\"btn-ed\" alt='check'\r\n                        onClick={() => {this.props.updateUser(this.props.user[\"Display Name\"],this.props.id,document.getElementById(\"fname\").value) } }>\r\n                        </img> : \r\n                        <img src=\"./ContactList/edit.png\" className=\"btn-ed\" alt='edit'\r\n                        onClick={() => {this.props.editUser(this.props.user[\"Display Name\"],this.props.id) } }>\r\n                        </img>}\r\n                    </td>\r\n                </tr>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserItem\r\n    ","import React from 'react';\r\nimport './index.css'\r\nimport LoaderPercent from '.././loader'\r\n\r\nclass UserDetails extends React.Component {\r\n    constructor(props) {\r\n      super(props)\r\n      console.log(\"i am in constructor\")\r\n      this.state = {\r\n        loading : true\r\n      }\r\n    }\r\n\r\n    closePopup() {\r\n      const content = document.querySelector('.user-details');\r\n      const overlay = document.getElementById('overlay');\r\n\r\n      content.style.display = 'none';\r\n      overlay.style.display = 'none';\r\n\r\n    }\r\n\r\n    componentDidUpdate() {\r\n      console.log(\"i am in componentDidUpdatethis.state.loading :\" + this.state.loading)\r\n      if (this.state.loading === true && this.props.isShow) {\r\n        this.setState({loading: false})\r\n      }\r\n    }\r\n\r\n    componentWillUpdate() {\r\n      this.state.loading = true\r\n      console.log(\"i am in componentWillUpdatethis.state.loading :\" + this.state.loading)\r\n    }\r\n\r\n    componentDidMount() {\r\n      console.log(\"i am in componentDidMount this.state.loading :\" + this.state.loading)\r\n    }\r\n\r\n    render() {\r\n      console.log(\"i am in render\")\r\n      return (\r\n        <div id=\"overlay\" class=\"overlay\">\r\n\r\n        <div className='user-details'>\r\n\r\n          <div className=\"content\">\r\n          {this.props.isShow ? ((this.state.loading ? (<ul>Loading............</ul>) :\r\n            (<ul> Selected User Details :\r\n            <li>Name: {this.props.selectedUser[\"Display Name\"]}</li>\r\n            <li>Email Id: {this.props.selectedUser[\"E-mail Address\"]}</li>\r\n            <li>Contact: {this.props.selectedUser[\"Home Phone\"]}</li>\r\n            <li>City: {this.props.selectedUser[\"Home City\"]}</li>\r\n            <li>Compny Name: {this.props.selectedUserOrganization}</li>\r\n          </ul>))) : ( <ul>Selct user</ul>)}\r\n            </div>\r\n            <button id=\"closePopup\" onClick={this.closePopup}>Close</button> \r\n        </div> \r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default UserDetails\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './index.css';\r\nimport LoaderPercent from '.././loader'\r\nimport UserItem from '.././useritem'\r\nimport UserDetails from '../userdetails';\r\n\r\n\r\nclass UserList extends React.Component{\r\n    constructor() {\r\n      super();\r\n      this.userDetails = null;\r\n      this.masterUserList = null;\r\n      this.state = {\r\n          userList : null,\r\n          isData: false,\r\n          displayDetails : false,\r\n          filtered: null,\r\n          isFilter: false,\r\n          editUser : false,\r\n          editUserId : null,\r\n          filteredList : null\r\n          }\r\n      this.selectUser = this.selectUser.bind(this);\r\n      this.deleteUser = this.deleteUser.bind(this);\r\n      this.editUser = this.editUser.bind(this);\r\n      this.updateUser = this.updateUser.bind(this);\r\n    }\r\n  \r\n    searchList = (e) => {\r\n      const searchKey = e.target.value.toLowerCase();\r\n      const { userList } = this.state;\r\n\r\n      const filteredList = searchKey\r\n        && userList.filter((item) =>\r\n            item[\"Display Name\"].toLowerCase().includes(searchKey)\r\n          );\r\n      this.setState({\r\n        isFilter: !!searchKey,\r\n        filteredList:  filteredList,\r\n      });\r\n    }\r\n    \r\n    getUsers() {\r\n      fetch('./ContactList/contacts_file.json')\r\n        .then(response => response.json())\r\n        .then(json => {\r\n          console.log(json)\r\n          this.setState({userList: json, isData:true})\r\n        })\r\n    }\r\n\r\n    deleteUser(name, i) {\r\n      const updatedUserList = this.state.userList.filter(\r\n        (ele) => ele[\"Display Name\"] !== name\r\n      );\r\n      this.setState({ userList: updatedUserList });\r\n    }\r\n\r\n    updateUser(user,id,updatedVal) {\r\n      const updatedUserList = [...this.state.userList];\r\n      const editedUserIndex = updatedUserList.findIndex((ele) => ele[\"Display Name\"] === user);\r\n      updatedUserList[editedUserIndex][\"Display Name\"] = updatedVal;\r\n      this.setState({ userList: updatedUserList, editUser: false, editUserId: null });\r\n    }\r\n\r\n    editUser(user,id) {\r\n      console.log(\"edit user\" + user + id)\r\n      this.setState({editUser: true, editUserId : id})\r\n    }\r\n    \r\n    selectUser(name, i) {\r\n      this.selectedUser = this.state.userList.find(\r\n        (ele) => ele[\"Display Name\"] === name\r\n      );\r\n      const content = document.querySelector('.user-details');\r\n      const overlay = document.getElementById('overlay');\r\n\r\n     \r\n\r\n\r\n      // Reset the animation state\r\n    content.classList.remove('show');\r\n\r\n    // Add the 'hide' class to smoothly fade out the content\r\n    content.classList.add('hide');\r\n\r\n    \r\n    setTimeout(() => {\r\n      // Change the content here\r\n      content.style.display = 'block';\r\n      overlay.style.display = 'block';\r\n      // Remove the 'hide' class and add the 'show' class to smoothly fade in the new content\r\n      content.classList.remove('hide');\r\n      content.classList.add('show');\r\n      this.selectedUser.id = i;\r\n      this.setState({ displayDetails: true });\r\n    }, 200);\r\n\r\n     \r\n    }\r\n\r\n    addUser() {\r\n      console.log(\"add user\" + document.querySelector(\".user-list\"))\r\n      let personName = window.prompt(\"Please enter name\")\r\n      let newId = this.state.userList.length + 1\r\n      console.log(this.state.userList.length)\r\n\r\n        fetch('https://jsonplaceholder.typicode.com/users', {\r\n          method: 'POST',\r\n          body: JSON.stringify({\r\n            \"id\": newId,\r\n            \"name\": personName,\r\n            \"username\": \"Harshada\",\r\n            \"email\": \"harsh@april.biz\",\r\n            \"address\": {\r\n              \"street\": \"Boisar tarapur\",\r\n              \"suite\": \"Apt. Nh\",\r\n              \"city\": \"Mumbai\",\r\n              \"zipcode\": \"401504-3874\",\r\n              \"geo\": {\r\n                \"lat\": \"-37.3159\",\r\n                \"lng\": \"81.1496\"\r\n              }\r\n            },\r\n            \"phone\": \"55865-881125-255\",\r\n            \"website\": \"hahhahye.org\",\r\n            \"company\": {\r\n              \"name\": \"Radheya-Foundation\",\r\n              \"catchPhrase\": \"Multi-layered client-server neural-net\",\r\n              \"bs\": \"harness real-time e-markets\"\r\n            }\r\n          },),\r\n          headers: {\r\n            'Content-type': 'application/json; charset=UTF-8',\r\n          },\r\n        })\r\n          .then((response) => response.json())\r\n          .then((addedData) => {\r\n            console.log(addedData)\r\n            this.setState({userList : [...this.state.userList, addedData]})\r\n            console.log(this.state.userList)\r\n          })\r\n        \r\n    }\r\n  componentDidMount() {\r\n      this.getUsers()\r\n  }\r\n\r\n     render() {\r\n      const {\r\n        userList,\r\n        isData,\r\n        filteredList,\r\n        isFilter,\r\n        editUser,\r\n        editUserId,\r\n        displayDetails,\r\n      } = this.state;\r\n\r\n      let userListToBeRendered = isFilter ? filteredList : userList;\r\n      return(\r\n        <div className='user-list'>\r\n          <input type=\"text\" className=\"search-box\" onChange={this.searchList} placeholder=\"Search...\" />\r\n          <div className=\"user-list\">\r\n            {isData ? \r\n            userListToBeRendered?.map((user,index) => \r\n            <UserItem user={user} id={index} selectUser={this.selectUser}\r\n            deleteUser={this.deleteUser} editUser={this.editUser}\r\n            editMode={editUser} editUserId={editUserId} \r\n            updateUser={this.updateUser} />) : \r\n\r\n            (<LoaderPercent />)}\r\n            \r\n            <button onClick={this.addUser}> Add User </button>\r\n        </div>\r\n          <UserDetails selectedUser={this.selectedUser} isShow={displayDetails} />\r\n      </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  export default UserList","import React from 'react';\r\nimport UserList from '.././userlist/index'\r\nimport './index.css';\r\n   \r\nclass UserContainer extends React.Component{\r\n\r\nrender() {\r\n    return (\r\n        <div className=\"user-container\">\r\n            <h2 className=\"title\">Contacts</h2>\r\n            <UserList />\r\n        </div>\r\n    )\r\n}\r\n}\r\n\r\nexport default UserContainer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport UserContainer from './usercontainer/index'\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <UserContainer />,\r\n  document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}