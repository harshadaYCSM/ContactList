{"version":3,"sources":["serviceWorker.js","loader/index.js","useritem/index.js","userdetails/index.js","userlist/index.js","usercontainer/index.js","index.js"],"names":["Boolean","window","location","hostname","match","count","loaderPercent","setInterval","id","src","UserItem","props","key","this","user","onClick","selectUser","className","confirm","deleteUser","React","Component","UserDetails","selectedUser","selectedUserOrganization","UserList","userDetails","state","userList","isData","displayDetails","filtered","isFilter","searchList","bind","e","newList","target","value","filter","item","lc","toLowerCase","includes","setState","fetch","then","response","json","console","log","i","ele","find","document","querySelector","personName","prompt","newId","length","method","body","JSON","stringify","headers","addedData","getUsers","type","onChange","placeholder","map","addUser","UserContainer","class","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d7f3b148.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nlet count = 0;\r\nlet timerS ;\r\nfunction loaderPercent() {\r\n    //document.getElementById(\"loader\").style.display = \"block\";\r\n    timerS = setInterval(function() {\r\n        if (count > 99) {\r\n            count = 0;\r\n        } \r\n        count ++;\r\n        //document.getElementById(\"countDisplay\").innerHTML = count + \"%\";\r\n    }, 200)\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"countDisplay\"></div>\r\n            <img src=\"loader.gif\" id=\"loader\"></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction stopLoading() {\r\n    document.getElementById(\"loader\").style.display = \"none\";\r\n    count = 0;\r\n    document.getElementById(\"countDisplay\").innerHTML = \"Load here\";\r\n    clearInterval(timerS);\r\n}\r\n\r\nexport default loaderPercent","import React from 'react';\r\nimport './index.css'\r\n\r\nclass UserItem extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n \r\n    render() {\r\n        return (\r\n                <tr key={this.props.user.id} id={this.props.user.id}> {this.props.user.id}\r\n                    <td onClick={() => {this.props.selectUser(this.props.user[\"Display Name\"]) } }>{this.props.user[\"Display Name\"]} </td>\r\n                    <td> <img src=\"delete.png\"\r\n                        className=\"btn-del\"\r\n                        onClick={() => { if (window.confirm('Are you sure to delete this user?')) this.props.deleteUser(this.props.user[\"Display Name\"]) } }></img></td>\r\n                    <td>\r\n                    {/* <button \r\n                        className=\"btn-select\"\r\n                        onClick={() => {this.props.selectUser(this.props.user.id) } }>Select User</button> */}\r\n                    </td>\r\n                </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserItem\r\n    ","import React from 'react';\r\n\r\nclass UserDetails extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    /* userDetailsRender(selectedID) {\r\n        if (this.state.displayDetails) {\r\n          if(this.newList) {\r\n            this.selectedUserId = selectedID+1;\r\n          } \r\n          else {\r\n            this.userDetails =(\r\n            <div className=\"userDetail\">\r\n              <ul>  Selected User Details :\r\n                <li>Name: {this.props.users[selectedID].name}</li>\r\n                <li>Email Id: {this.props.users[selectedID].email}</li>\r\n                <li>Website: {this.props.users[selectedID].website}</li>\r\n                <li>Contact: {this.props.users[selectedID].phone}</li>\r\n                <li>City: {this.props.users[selectedID].address.city}</li>\r\n                <li>Compny Name: {this.props.users[selectedID].company.name}</li>\r\n            </ul>\r\n          </div>)\r\n        }\r\n      }\r\n    } */\r\n\r\nrender() {\r\n    return (\r\n        <ul> Selected User Details :\r\n          <li>Name: {this.props.selectedUser[\"Display Name\"]}</li>\r\n          <li>Email Id: {this.props.selectedUser[\"E-mail Address\"]}</li>\r\n          <li>Contact: {this.props.selectedUser[\"Home Phone\"]}</li>\r\n          <li>City: {this.props.selectedUser[\"Home City\"]}</li>\r\n          <li>Compny Name: {this.props.selectedUserOrganization}</li>\r\n        </ul>\r\n    )\r\n}\r\n}\r\n\r\nexport default UserDetails","import React from 'react';\r\nimport './index.css';\r\nimport LoaderPercent from '.././loader'\r\nimport UserItem from '.././useritem'\r\nimport UserDetails from '../userdetails';\r\n\r\n\r\nclass UserList extends React.Component{\r\n    constructor() {\r\n      super();\r\n      this.userDetails = null;\r\n      this.state = {\r\n          userList : null,\r\n          isData: false,\r\n          displayDetails : false,\r\n          filtered: null,\r\n          isFilter: false\r\n          }\r\n      this.searchList = this.searchList.bind(this);\r\n    }\r\n  \r\n    searchList(e) {\r\n      // Variable to hold the original version of the list\r\n  let currentList = [];\r\n      // Variable to hold the filtered list before putting into state\r\n  let newList = [];\r\n\r\n      // If the search bar isn't empty\r\n  if (e.target.value !== \"\") {\r\n          // Assign the original list to currentList\r\n    currentList = this.state.userList;\r\n\r\n          // Use .filter() to determine which items should be displayed\r\n          // based on the search terms\r\n    newList = currentList.filter(item => {\r\n              // change current item to lowercase\r\n      const lc = item[\"Display Name\"].toLowerCase();\r\n              // change search term to lowercase\r\n      const filter = e.target.value.toLowerCase();\r\n              // check to see if the current list item includes the search term\r\n              // If it does, it will be added to newList. Using lowercase eliminates\r\n              // issues with capitalization in search terms and search content\r\n      return lc.includes(filter);\r\n    });\r\n  } else {\r\n          // If the search bar is empty, set newList to original task list\r\n    newList = this.state.userList;\r\n  }\r\n      // Set the filtered state based on what our rules added to newList\r\n  this.setState({\r\n    filtered: newList,\r\n    isFilter: true\r\n  });\r\n}\r\n    getUsers() {\r\n      fetch('./contacts_file.json')\r\n        .then(response => response.json())\r\n        .then(json => {\r\n          console.log(json)\r\n          this.setState({userList: json, isData:true})\r\n        })\r\n    }\r\n\r\n    deleteUser(i) {\r\n      /* const fetchURL = 'https://jsonplaceholder.typicode.com/users/'+ i;\r\n      const newData = fetch(fetchURL, {\r\n          method: 'DELETE',\r\n         }) */\r\n         this.newList = this.state.userList.filter(function(ele){ return ele[\"Display Name\"] !== i; });\r\n         this.setState({userList: this.newList})\r\n    }\r\n\r\n    selectUser(i) {\r\n      /* if (this.selectedUser) {\r\n        document.getElementById(this.selectedUser.id ).style.background = \"none\"\r\n      } */\r\n      this.selectedUser = this.state.userList.find((ele) => ele[\"Display Name\"] === i)\r\n      //document.getElementById(i).style.background = \"#91a9ec\"\r\n      this.setState({displayDetails:true})\r\n    }\r\n\r\n    addUser() {\r\n      \r\n      console.log(\"add user\" + document.querySelector(\".user-list\"))\r\n      let personName = window.prompt(\"Please enter name\")\r\n      let newId = this.state.userList.length + 1\r\n      console.log(this.state.userList.length)\r\n\r\n        fetch('https://jsonplaceholder.typicode.com/users', {\r\n          method: 'POST',\r\n          body: JSON.stringify({\r\n            \"id\": newId,\r\n            \"name\": personName,\r\n            \"username\": \"Harshada\",\r\n            \"email\": \"harsh@april.biz\",\r\n            \"address\": {\r\n              \"street\": \"Boisar tarapur\",\r\n              \"suite\": \"Apt. Nh\",\r\n              \"city\": \"Mumbai\",\r\n              \"zipcode\": \"401504-3874\",\r\n              \"geo\": {\r\n                \"lat\": \"-37.3159\",\r\n                \"lng\": \"81.1496\"\r\n              }\r\n            },\r\n            \"phone\": \"55865-881125-255\",\r\n            \"website\": \"hahhahye.org\",\r\n            \"company\": {\r\n              \"name\": \"Radheya-Foundation\",\r\n              \"catchPhrase\": \"Multi-layered client-server neural-net\",\r\n              \"bs\": \"harness real-time e-markets\"\r\n            }\r\n          },),\r\n          headers: {\r\n            'Content-type': 'application/json; charset=UTF-8',\r\n          },\r\n        })\r\n          .then((response) => response.json())\r\n          .then((addedData) => {\r\n            console.log(addedData)\r\n            this.setState({userList : [...this.state.userList, addedData]})\r\n            console.log(this.state.userList)\r\n          })\r\n        \r\n    }\r\n  componentDidMount() {\r\n      this.getUsers()\r\n  }\r\n\r\n     render() {\r\n      return(\r\n        <div>\r\n        <div className=\"user-list\">\r\n        <input type=\"text\" className=\"input\" onChange={this.searchList} placeholder=\"Search...\" />\r\n        {this.state.isData ? (this.state.isFilter ? this.state.filtered.map((user) => <UserItem user={user} selectUser={this.selectUser.bind(this)} deleteUser={this.deleteUser.bind(this)}/>)  : this.state.userList.map((user) => <UserItem user={user} selectUser={this.selectUser.bind(this)} deleteUser={this.deleteUser.bind(this)}/>)) : \r\n        (<LoaderPercent />)}\r\n        <button onClick={this.addUser.bind(this)}> Add User </button>\r\n        </div>\r\n        <div className=\"user-details\">\r\n        {this.state.displayDetails ? <UserDetails selectedUser={this.selectedUser}/> : <div>Select any user to see details</div>}\r\n        </div>\r\n        </div>\r\n        \r\n      )\r\n    }\r\n  }\r\n\r\n  export default UserList","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport UserList from '.././userlist/index'\r\n// import './index.css';\r\n   \r\nfunction UserContainer() {\r\n    return (\r\n        <div class=\"user-container\">\r\n\r\n            <UserList />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserContainer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport UserContainer from './usercontainer/index'\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <UserContainer />,\r\n  document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}